"""change column name

Revision ID: 0dc9d06904ab
Revises: 307e11a509e0
Create Date: 2025-03-16 06:04:53.462593

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0dc9d06904ab'
down_revision: Union[str, None] = '307e11a509e0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema: rename columns safely to avoid FK issues."""
    # Rename `id` to `post_id_table` in `posts`
    op.alter_column('posts', 'id', new_column_name='post_id_table')

    # Rename `id` to `comment_id_table` in `comments`
    op.alter_column('comments', 'id', new_column_name='comment_id_table')
    op.alter_column('comments', 'text', new_column_name='comment_text')
    op.alter_column('comments', 'created_at', new_column_name='comment_created_at')
    op.alter_column('comments', 'updated_at', new_column_name='comment_updated_at')

    # Update foreign key for `comments`
    op.drop_constraint('comments_post_id_fkey', 'comments', type_='foreignkey')
    op.create_foreign_key('comments_post_id_fkey', 'comments', 'posts', ['post_id'], ['post_id_table'])

    # Rename `id` to `likes_id_table` in `likes`
    op.alter_column('likes', 'id', new_column_name='likes_id_table')
    op.alter_column('likes', 'created_at', new_column_name='likes_created_at')

    # Update foreign key for `likes`
    op.drop_constraint('likes_post_id_fkey', 'likes', type_='foreignkey')
    op.create_foreign_key('likes_post_id_fkey', 'likes', 'posts', ['post_id'], ['post_id_table'])



def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('posts', sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('posts_id_seq'::regclass)"), autoincrement=True, nullable=False))
    op.drop_column('posts', 'post_id_table')
    op.add_column('likes', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.add_column('likes', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'likes', type_='foreignkey')
    op.create_foreign_key('likes_post_id_fkey', 'likes', 'posts', ['post_id'], ['id'])
    op.drop_column('likes', 'likes_created_at')
    op.drop_column('likes', 'likes_id_table')
    op.add_column('comments', sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('comments', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.add_column('comments', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('comments', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'comments', type_='foreignkey')
    op.create_foreign_key('comments_post_id_fkey', 'comments', 'posts', ['post_id'], ['id'])
    op.drop_column('comments', 'comment_updated_at')
    op.drop_column('comments', 'comment_created_at')
    op.drop_column('comments', 'comment_text')
    op.drop_column('comments', 'comment_id_table')
    # ### end Alembic commands ###
